// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())
    name String @db.VarChar(50)
    email String @db.VarChar(50)
    passwordHash BigInt
    created DateTime @db.DateTime
    isAdmin Boolean
    groceryList GroceryList?
    recipies Recipe[]
    nutritionsplans Nutritionplan[]
    reports Report[]
    threads Thread[]
    comments Comment[]
    favors UserFavorsRecipe[]
}

model GroceryList{
    id Int @id @default(autoincrement())
    user User @relation(fields: [userID], references:[id])
    userID Int
    includes GroceryListIncludesIngredient[]
}

model Recipe{
    id Int @id @default(autoincrement())
    name String @db.VarChar(50)
    description String @db.VarChar(1000)
    servings Int
    created DateTime @db.DateTime
    bewertung Int?
    featured Boolean @default(false)
    creator User @relation(fields: [creatorID], references:[id]) //creates Relation
    creatorID Int
    pictures Picture[]
    comments Comment[]
    favored UserFavorsRecipe[]
    used NutritionplanIncludesRecipe[]
    ingredients RecipeIncludesIngredient[]
    category RecipeInCategory[]
}

//Favors Relation
model UserFavorsRecipe{
    user User @relation(fields: [userID], references:[id])
    userID Int
    recipe Recipe @relation(fields: [recipeID], references:[id])
    recipeID Int
    @@id([userID, recipeID])
}

model Nutritionplan{
    id Int @id @default(autoincrement())
    name String @db.VarChar(50)
    user User @relation(fields: [userID], references: [id]) //belongsto User Relation
    userID Int
    recipies NutritionplanIncludesRecipe[]
}

//Nutritionplan and Recipe Relation
model NutritionplanIncludesRecipe{
    nutritionplan Nutritionplan @relation(fields: [nutritionplanID], references: [id])
    nutritionplanID Int
    recipe Recipe @relation(fields: [recipeID], references: [id])
    recipeID Int
    @@id([nutritionplanID, recipeID])
}

model Ingredient{
    name String @id @db.VarChar(50)
    calories Int
    vegan Boolean
    nutritionalValues String @db.VarChar(100) //VLLT ALS JSON?
    type String @db.VarChar(20)
    nutriScore Int
    included GroceryListIncludesIngredient[]
    recepies RecipeIncludesIngredient[]
}

model GroceryListIncludesIngredient{
    ingredient Ingredient @relation(fields: [ingredientName], references: [name])
    ingredientName String @db.VarChar(50)
    groceryList GroceryList @relation(fields: [groceryListID], references: [id])
    groceryListID Int
    @@id([ingredientName, groceryListID])
}

model RecipeIncludesIngredient{
    ingredient Ingredient @relation(fields: [ingredientName], references: [name])
    ingredientName String @db.VarChar(50)
    recipe Recipe @relation(fields: [recipeID], references: [id])
    recipeID Int
    @@id([ingredientName, recipeID])
}

model Report{
    id Int @id @default(autoincrement())
    reason String @db.VarChar(50)
    handled Boolean @default(false)
    created DateTime @db.DateTime
    user User @relation(fields: [offender], references: [id])
    offender Int
}

model Picture{
    id Int @id @default(autoincrement())
    url String @db.VarChar(50)
    recipe Recipe @relation(fields: [recipeID], references: [id])
    recipeID Int
}

model Thread{
    id Int @id @default(autoincrement())
    title String @db.VarChar(50)
    threadText String? @db.VarChar(500)
    created DateTime @db.DateTime
    user User @relation(fields: [author], references: [id])
    author Int
    comments Comment[]
}

model Category{
    name String @id @db.VarChar(50)
    recipe RecipeInCategory[]
}

model RecipeInCategory{
    recipe Recipe @relation(fields: [recipeID], references: [id])
    recipeID Int
    category Category @relation(fields: [categoryName], references: [name])
    categoryName String @db.VarChar(50)
    @@id([recipeID, categoryName])
}

model Comment{
    id Int @id @default(autoincrement())
    text String @db.VarChar(200)
    created DateTime @db.DateTime
    user User @relation(fields: [userID], references: [id])
    userID Int
    recipe Recipe? @relation(fields: [recipeID], references: [id])
    recipeID Int?
    thread Thread? @relation(fields: [threadID], references: [id])
    threadID Int?
    topCommentID Int?
    topComment Comment? @relation("CommentComment", fields:[topCommentID], references: [id])
    comments Comment[] @relation("CommentComment")
}
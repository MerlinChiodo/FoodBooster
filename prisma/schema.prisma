generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(50)
  email           String             @db.VarChar(50)
  passwordHash    String
  created         DateTime?          @db.DateTime(0)
  isAdmin         Boolean?           @default(false)
  answer          String
  comments        Comment[]
  groceryList     GroceryList?
  nutritionsplans Nutritionplan[]
  recipies        Recipe[]
  reports         Report[]
  threads         Thread[]
  favors          UserFavorsRecipe[]
}

model GroceryList {
  id       Int                             @id @default(autoincrement())
  userID   Int                             @unique
  user     User                            @relation(fields: [userID], references: [id], onDelete: Cascade)
  includes GroceryListIncludesIngredient[]
}

model Recipe {
  id           Int                           @id @default(autoincrement())
  name         String                        @db.VarChar(50)
  description  String                        @db.VarChar(10000)
  servings     Int
  created      DateTime                      @db.DateTime(0)
  featured     Boolean                       @default(false)
  creatorID    Int
  rating       Int?                          @default(0)
  totalRatings Int?                          @default(0)
  creator      User                          @relation(fields: [creatorID], references: [id], onDelete: Cascade)
  comments     Comment[]
  used         NutritionplanIncludesRecipe[]
  pictures     Picture[]
  category     RecipeInCategory[]
  ingredients  RecipeIncludesIngredient[]
  favored      UserFavorsRecipe[]

  @@index([creatorID], map: "Recipe_creatorID_fkey")
}

model UserFavorsRecipe {
  userID   Int
  recipeID Int
  recipe   Recipe @relation(fields: [recipeID], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@id([userID, recipeID])
  @@index([recipeID], map: "UserFavorsRecipe_recipeID_fkey")
}

model Nutritionplan {
  id       Int                           @id @default(autoincrement())
  name     String                        @db.VarChar(50)
  userID   Int
  user     User                          @relation(fields: [userID], references: [id], onDelete: Cascade)
  recipies NutritionplanIncludesRecipe[]

  @@index([userID], map: "Nutritionplan_userID_fkey")
}

model NutritionplanIncludesRecipe {
  nutritionplanID Int
  recipeID        Int
  day             Int
  time            Int
  nutritionplan   Nutritionplan @relation(fields: [nutritionplanID], references: [id], onDelete: Cascade)
  recipe          Recipe        @relation(fields: [recipeID], references: [id], onDelete: Cascade)

  @@id([nutritionplanID, recipeID])
  @@index([recipeID], map: "NutritionplanIncludesRecipe_recipeID_fkey")
}

model Ingredient {
  name              String                          @id @db.VarChar(50)
  calories          Int
  vegan             Boolean
  nutritionalValues Json
  type              String                          @db.VarChar(20)
  nutriScore        Int
  included          GroceryListIncludesIngredient[]
  recepies          RecipeIncludesIngredient[]
}

model GroceryListIncludesIngredient {
  ingredientName String      @db.VarChar(50)
  groceryListID  Int
  groceryList    GroceryList @relation(fields: [groceryListID], references: [id], onDelete: Cascade)
  ingredient     Ingredient  @relation(fields: [ingredientName], references: [name], onDelete: Cascade)

  @@id([ingredientName, groceryListID])
  @@index([groceryListID], map: "GroceryListIncludesIngredient_groceryListID_fkey")
}

model RecipeIncludesIngredient {
  ingredientName String     @db.VarChar(50)
  recipeID       Int
  amount         Int        @default(0)
  ingredient     Ingredient @relation(fields: [ingredientName], references: [name], onDelete: Cascade)
  recipe         Recipe     @relation(fields: [recipeID], references: [id], onDelete: Cascade)
  amount         Int        @default(0)

  @@id([ingredientName, recipeID])
  @@index([recipeID], map: "RecipeIncludesIngredient_recipeID_fkey")
}

model Report {
  id       Int      @id @default(autoincrement())
  reason   String   @db.VarChar(50)
  handled  Boolean  @default(false)
  created  DateTime @db.DateTime(0)
  offender Int
  user     User     @relation(fields: [offender], references: [id], onDelete: Cascade)

  @@index([offender], map: "Report_offender_fkey")
}

model Picture {
  id       Int    @id @default(autoincrement())
  url      String @db.VarChar(50)
  recipeID Int
  recipe   Recipe @relation(fields: [recipeID], references: [id], onDelete: Cascade)

  @@index([recipeID], map: "Picture_recipeID_fkey")
}

model Thread {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(50)
  threadText String?   @db.VarChar(500)
  created    DateTime  @db.DateTime(0)
  author     Int
  user       User      @relation(fields: [author], references: [id], onDelete: Cascade)
  comments   Comment[]

  @@index([author], map: "Thread_author_fkey")
}

model Category {
  name   String             @id @db.VarChar(50)
  recipe RecipeInCategory[]
}

model RecipeInCategory {
  recipeID     Int
  categoryName String   @db.VarChar(50)
  category     Category @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  recipe       Recipe   @relation(fields: [recipeID], references: [id], onDelete: Cascade)

  @@id([recipeID, categoryName])
  @@index([categoryName], map: "RecipeInCategory_categoryName_fkey")
}

model Comment {
  id           Int       @id @default(autoincrement())
  text         String    @db.VarChar(200)
  created      DateTime  @db.DateTime(0)
  userID       Int
  recipeID     Int?
  threadID     Int?
  topCommentID Int?
  recipe       Recipe?   @relation(fields: [recipeID], references: [id], onDelete: Cascade)
  thread       Thread?   @relation(fields: [threadID], references: [id], onDelete: Cascade)
  topComment   Comment?  @relation("CommentComment", fields: [topCommentID], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userID], references: [id], onDelete: Cascade)
  comments     Comment[] @relation("CommentComment")

  @@index([recipeID], map: "Comment_recipeID_fkey")
  @@index([threadID], map: "Comment_threadID_fkey")
  @@index([topCommentID], map: "Comment_topCommentID_fkey")
  @@index([userID], map: "Comment_userID_fkey")
}
